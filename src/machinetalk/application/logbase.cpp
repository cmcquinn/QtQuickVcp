/****************************************************************************
**
** This file was generated by a code generator based on imatix/gsl
** Any changes in this file will be lost.
**
****************************************************************************/
#include "logbase.h"
#include <google/protobuf/text_format.h>
#include "debughelper.h"

#if defined(Q_OS_IOS)
namespace gpb = google_public::protobuf;
#else
namespace gpb = google::protobuf;
#endif

using namespace nzmqt;

namespace machinetalk { namespace application {

/** Generic Log Base implementation */
LogBase::LogBase(QObject *parent)
    : QObject(parent)
    , QQmlParserStatus()
    , m_componentCompleted(false)
    , m_ready(false)
    , m_debugName(QStringLiteral("Log Base"))
    , m_logChannel(nullptr)
    , m_state(State::Down)
    , m_previousState(State::Down)
    , m_errorString(QStringLiteral(""))
{
    // initialize log channel
    m_logChannel = new common::SimpleSubscribe(this);
    m_logChannel->setDebugName(m_debugName + " - log");
    connect(m_logChannel, &common::SimpleSubscribe::socketUriChanged,
            this, &LogBase::logUriChanged);
    connect(m_logChannel, &common::SimpleSubscribe::stateChanged,
            this, &LogBase::logChannelStateChanged);
    connect(m_logChannel, &common::SimpleSubscribe::socketMessageReceived,
            this, &LogBase::processLogChannelMessage);
    // state machine
    connect(this, &LogBase::fsmUpEntered,
            this, &LogBase::fsmUpEntry);
    connect(this, &LogBase::fsmUpExited,
            this, &LogBase::fsmUpExit);
    connect(this, &LogBase::fsmDownConnect,
            this, &LogBase::fsmDownConnectEvent);
    connect(this, &LogBase::fsmTryingLogUp,
            this, &LogBase::fsmTryingLogUpEvent);
    connect(this, &LogBase::fsmTryingDisconnect,
            this, &LogBase::fsmTryingDisconnectEvent);
    connect(this, &LogBase::fsmUpDisconnect,
            this, &LogBase::fsmUpDisconnectEvent);
}

LogBase::~LogBase()
{
}

/** Add a topic that should be subscribed **/
void LogBase::addLogTopic(const QByteArray &name)
{
    m_logChannel->addSocketTopic(name);
}

/** Removes a topic from the list of topics that should be subscribed **/
void LogBase::removeLogTopic(const QByteArray &name)
{
    m_logChannel->removeSocketTopic(name);
}

/** Clears the the topics that should be subscribed **/
void LogBase::clearLogTopics()
{
    m_logChannel->clearSocketTopics();
}

void LogBase::startLogChannel()
{
    m_logChannel->setReady(true);
}

void LogBase::stopLogChannel()
{
    m_logChannel->setReady(false);
}

/** Processes all message received on log */
void LogBase::processLogChannelMessage(const QByteArray &topic, const Container &rx)
{

    // react to log message message
    if (rx.type() == MT_LOG_MESSAGE)
    {
        handleLogMessageMessage(topic, rx);
    }

    emit logMessageReceived(topic, rx);
}

void LogBase::fsmDown()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State DOWN");
#endif
    m_state = State::Down;
    emit stateChanged(m_state);
}

void LogBase::fsmDownConnectEvent()
{
    if (m_state == State::Down)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event CONNECT");
#endif
        // handle state change
        emit fsmDownExited(QPrivateSignal());
        fsmTrying();
        emit fsmTryingEntered(QPrivateSignal());
        // execute actions
        updateTopics();
        startLogChannel();
     }
}

void LogBase::fsmTrying()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State TRYING");
#endif
    m_state = State::Trying;
    emit stateChanged(m_state);
}

void LogBase::fsmTryingLogUpEvent()
{
    if (m_state == State::Trying)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event LOG UP");
#endif
        // handle state change
        emit fsmTryingExited(QPrivateSignal());
        fsmUp();
        emit fsmUpEntered(QPrivateSignal());
        // execute actions
     }
}

void LogBase::fsmTryingDisconnectEvent()
{
    if (m_state == State::Trying)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event DISCONNECT");
#endif
        // handle state change
        emit fsmTryingExited(QPrivateSignal());
        fsmDown();
        emit fsmDownEntered(QPrivateSignal());
        // execute actions
        stopLogChannel();
     }
}

void LogBase::fsmUp()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State UP");
#endif
    m_state = State::Up;
    emit stateChanged(m_state);
}
void LogBase::fsmUpEntry()
{
    setConnected();
}
void LogBase::fsmUpExit()
{
    clearConnected();
}

void LogBase::fsmUpDisconnectEvent()
{
    if (m_state == State::Up)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event DISCONNECT");
#endif
        // handle state change
        emit fsmUpExited(QPrivateSignal());
        fsmDown();
        emit fsmDownEntered(QPrivateSignal());
        // execute actions
        stopLogChannel();
     }
}

void LogBase::logChannelStateChanged(common::SimpleSubscribe::State state)
{

    if (state == common::SimpleSubscribe::State::Up)
    {
        if (m_state == State::Trying)
        {
            emit fsmTryingLogUp(QPrivateSignal());
        }
    }
}

/** start trigger function */
void LogBase::start()
{
    if (m_state == State::Down) {
        emit fsmDownConnect(QPrivateSignal());
    }
}

/** stop trigger function */
void LogBase::stop()
{
    if (m_state == State::Trying) {
        emit fsmTryingDisconnect(QPrivateSignal());
    }
    else if (m_state == State::Up) {
        emit fsmUpDisconnect(QPrivateSignal());
    }
}

} } // namespace machinetalk::application
