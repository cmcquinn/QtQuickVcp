#!/usr/bin/env bash

# Build a portable AppImage starting from a clean system. Other examples at:
# https://github.com/probonopd/AppImages/blob/master/recipes/scribus/Recipe

# NOTES:
#
# 1) IT IS NOT SAFE TO RUN THIS RECIPE ON A PERSISTENT FILESYSTEM! Use either:
#      * A chroot into a Live ISO, squashfs or Docker Image.
#      * Or, a virtual machine on a dedicated build server (e.g. Travis CI)
#    DO NOT RUN THE RECIPE ON A NORMAL COMPUTER OUTSIDE OF A TEMPORARY CHROOT!
#

set -e # Halt on errors
set -x # Be verbose

##########################################################################
# CHECK SYSTEM
##########################################################################

# This script should be run inside CentOS 6 if possible,
# or CentOS 7 if 6 is unavailable for your architecture.
if [ "$(grep "Debian GNU/Linux 9 (stretch)" /etc/*release*)" ]; then
  OS="Debian Stretch"
else
  echo "${0}: Warning: Not running on Debian Jessie!" >&2
fi

##########################################################################
# GET DEPENDENCIES
##########################################################################
# only prepare system if not already prepared (custom docker image)
if [ ! -f /etc/system-prepared ]; then
  ./init.sh
fi

##########################################################################
# BUILD QTQUICKVCP
##########################################################################

# armhf uses qt5 from the Debian repos so these are wrong for armhf
if [ "$1" == "armhf" ]; then
  export QML_IMPORT_PATH="/usr/lib/arm-linux-gnueabihf/qt5/qml"
else
  export PATH="${PWD}/qt5/bin:$PATH"
  export LD_LIBRARY_PATH="${PWD}/qt5/lib:$LD_LIBRARY_PATH"
  export QT_PLUGIN_PATH="${PWD}/qt5/plugins"
  export QML_IMPORT_PATH="${PWD}/qt5/qml"
  export QML2_IMPORT_PATH="${PWD}/qt5/qml"
  export QT_QPA_PLATFORM_PLUGIN_PATH="${PWD}/qt5/plugins/platforms"
  export QT_INSTALL_PREFIX="${PWD}/qt5"
fi

# If not building on Travis then might need to fetch QtQuickVcp
[ -d "QtQuickVcp" ] || git clone --depth 1 https://github.com/qtquickvcp/QtQuickVcp.git

cd QtQuickVcp

# deployment.pri needs to be patched on armhf or make install fails
if [ "$1" == "armhf" ]; then
  cd src
  patch < deployment-armhf.patch
  cd ..
fi

mkdir -p build.release
cd build.release

# Figure out how many processor cores there are
export CORES=$(grep -c ^processor /proc/cpuinfo)
qmake -r ..
make -j${CORES}
# make docs
make install
# make install_docs

# compress QtQuick module
zipfile="QtQuickVcp.tar.gz"
mkdir qml
mkdir lib
cp -r ${QML_IMPORT_PATH}/Machinekit qml/Machinekit
if [ "$1" == "armhf" ]; then
  cp /usr/lib/arm-linux-gnueabihf/libmachinetalk*
else
  cp ${QT_INSTALL_PREFIX}/lib/libmachinetalk* lib/
fi
tar -zcf $zipfile qml lib
# allow access to archive from outside the chroot
chmod a+rwx $zipfile
chmod a+rwx .
ls -lh $zipfile
rm -r qml
rm -r lib

# create binary zip file
qt-deploy ../build/deployment-scripts/linux_$1.ini --deploy

# AppImageKit is not currently working on armhf, so don't bother with the AppImage stuff if build for armhf
if [ "$1" != "armhf"]; then

  # prepare AppDir
  cd MachinekitClient.AppDir
  cp /usr/share/pixmaps/machinekit.png .
  cp /usr/share/applications/machinekit-client.desktop .
  mv machinekit-client AppRun
  cd ..

  # prepare variables
  appdir=${PWD}/MachinekitClient.AppDir/
  appimage=${PWD}/MachinekitClient.AppImage

  # back to home folder
  cd ../../

  ##########################################################################
  # PACKAGE INTO APPIMAGE WITH APPIMAGEKIT
  ##########################################################################
  cd AppImageKit/AppImageAssistant.AppDir
  ./package  "$appdir" "$appimage"

  # allow access to AppImage from outside the chroot
  chmod a+rwx "$appimage"
  parent_dir="$(dirname "$appimage")"
  while [ "$(dirname "$parent_dir")" != "$parent_dir" ]; do
    [ "$parent_dir" == "/" ] && break
    chmod a+rwx "$parent_dir"
    parent_dir="$(dirname "$parent_dir")"
  done

  ls -lh "$appimage"
fi